# -*- coding: utf-8 -*-
"""Human_Activity_Recognition.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xwfuQXd94d-DbNJjPHBKkaHfU-Iwbbvz

# Human Activity Recognition
"""

# Commented out IPython magic to ensure Python compatibility.
# import the standard libraries
import pandas as pd #Data processing and I/O operation
import numpy as np #Linear Algebra
import matplotlib.pyplot as plt

# %matplotlib inline

#Import the machine libraries
from sklearn.utils import shuffle
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

"""### Import the Dataset"""

train = shuffle(pd.read_csv('train.csv'))
test = shuffle(pd.read_csv('test.csv'))

train.head(10)

train.tail(1)

train.shape

test.shape

"""### Check for missing values"""

print('Any missing value in training set:', train.isnull().values.any())
print('Any missing value in training set:', test.isnull().values.any())

"""### Exploring the Dataset"""

train_outcome = pd.crosstab(index = train['Activity'], columns='Count')
train_outcome

"""### Exploratory Data Analysis"""

temp = train['Activity'].value_counts()
temp

df = pd.DataFrame({'labels':temp.index, 'values':temp.values})

df.head(2)

labels=df['labels']
sizes = df['values']
colors = ['yellowgreen', 'lightskyblue', 'gold', 'lightpink', 'cyan', 'lightcoral']
patches, texts = plt.pie(sizes, colors=colors, labels = labels, shadow=True, startangle=90, pctdistance=1.1, labeldistance=1.2)
plt.legend(patches, labels, loc='right')
plt.axis('equal')
plt.tight_layout()
plt.show()

"""### Data Processing"""

X_train = pd.DataFrame(train.drop(['Activity', 'subject'], axis=1))
Y_train_label = train.Activity.values.astype(object)
X_test = pd.DataFrame(test.drop(['Activity', 'subject'], axis=1))
Y_test_label = test.Activity.values.astype(object)

from sklearn import preprocessing
encoder = preprocessing.LabelEncoder()

encoder.fit(Y_train_label)
y_train = encoder.transform(Y_train_label)

y_train

encoder.fit(Y_test_label)
y_test = encoder.transform(Y_test_label)

y_test

num_cols = X_train._get_numeric_data().columns
num_cols.size

"""## Model Building for Human Acitivity Recognition"""

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
x_train = scaler.fit_transform(X_train)
x_test = scaler.fit_transform(X_test)

knn = KNeighborsClassifier(n_neighbors=24)
knn.fit(x_train,y_train)

y_pred = knn.predict(x_test)

print((accuracy_score(y_test, y_pred)*100), '%')

scores = []
for i in range(1,50):
    knn=KNeighborsClassifier(n_neighbors=i, n_jobs=-1)
    knn.fit(x_train, y_train)
    y_pred = knn.predict(x_test)
    scores.append(accuracy_score(y_test, y_pred))

plt.xlabel('Number of Neighbors')
plt.ylabel('Accuracy Score')
xticks = range(1,50)
plt.plot(xticks, scores, color='red', linestyle='solid', marker='o', 
        markersize=5, markerfacecolor='blue')
plt.show()

scores = np.array(scores)
print('Optimal number of neighbors is:', scores.argmax())
print('Accuracy Score:' +str(scores.max()*100),'%')

"""### Conclusion"""

knn = KNeighborsClassifier(n_neighbors=19)
knn.fit(x_train, y_train)
y_pred = knn.predict(x_test)
y_pred_label = list(encoder.inverse_transform(y_pred))

y_pred_label

print(confusion_matrix(Y_test_label, y_pred_label))

print(classification_report(Y_test_label, y_pred_label))



